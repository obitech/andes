{
    "docs": [
        {
            "location": "/",
            "text": "Andes API Documentation\n\n\nWelcome to Andes' API documentation. For information on classes and functions themselves, please refer to the source for now.\n\n\n\n\nGithub repo\n\n\nDocker image\n\n\n\n\nGeneral\n\n\nAndes offers an easy-to-use way to deploy multiple different container setups (stacks) on the same host. For this there are three parts:\n\n\n\n\nCaddy\n acting as a reverse proxy handling requests to your different stacks.\n\n\nAndes API to create and manage your stacks and build your docker-compose files.\n\n\nDocker-compose bringing up your previously defined stacks as docker-compose.yml files.\n\n\n\n\nNormally the workflow looks like that:\n\n\n\n\nYou register a blueprint, which is essentially a docker image on docker hub, or one you created locally.\n\n\nFrom a blueprint you create a service, which is defining your container environment\n\n\nYou add one or more services to a stack.\n\n\nYou apply a stack, which will create the \ndocker-compose.yml\n and specific \nCaddyfile\n for it.\n\n\nYou launch your stack and Caddy will serve it on your specified subdomain.\n\n\n\n\nNote that Andes' stacks have nothing to do with the \ndocker stack\n command in swarm mode.\n\n\nInstallation\n\n\nAfter you've cloned the github repo, the best way to setup andes is to run the bootstrap script. This installation has been tested on Debian, Ubuntu and macOS.\n\n\nbootstrap.sh\n\n\nThe script accepts the following arguments:\n\n\n\n\n\n\n\n\nArgument\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\n-h\n\n\nDisplays usage information\n\n\n\n\n\n\n-c\n\n\nSkips Caddy installation and setup. Use this flag if you only want to install docker and docker-compose\n\n\n\n\n\n\n-d\n\n\nSkips docker and docker-compose installation. Use this flag if you have already docker installed and just want to setup Caddy for Andes.\n\n\n\n\n\n\n-H <hostname>\n\n\nSpecifies the hostname Caddy to be reached under. Defaults to localhost\n\n\n\n\n\n\n-e <email>\n\n\nYour email address which is required to setup Let's Encrypt TLS certificates. Without this, TLS can not be used.\n\n\n\n\n\n\n-V <version>\n\n\nThe docker-compose version to be installed. Defaults to 1.17.1\n\n\n\n\n\n\n\n\nDocker installation\n\n\nFor the docker installation, the script follows the procedure from the official docker documentation\n\n\n\n\nRemove deprecated docker packages\n\n\nInstall additional packages, namely\n\n\napt-transport-https\n\n\nca-certificates\n\n\ncurl\n\n\nsoftware-properties-common\n\n\nbash-completion\n\n\n\n\n\n\nAdd and verify docker's official GPG key\n\n\nAdd and install the \ndocker-ce\n repository.\n\n\nAdd your user to the docker group\n\n\nEnable the docker.service\n\n\nCurl and install docker-compose, plus add it to \nbash-completion\n\n\n\n\nBetween the docker and Caddy setup, the script will also create a user defined docker network with subnet \n172.42.0.0./16\n where Caddy and the deployed containers will run in.\n\n\nCaddy setup\n\n\n\n\nCreate a \nCaddyfile\n in \nandes/andes/system\n according to the previously passed arguments\n\n\nPull the \nCaddy container image\n\n\nPull the \nAndes API container image\n\n\nBring up the \ndocker-compose.yml\n in \nandes/andes/system\n.\n\n\n\n\nCheck with \ndocker container ls\n if you have the andes and Caddy container up and running. The API will will be reachable under your specified hostname + \n/api\n\n\nUsing the API\n\n\nStart & Stop\n\n\nIf you're installing andes from the bootstrap script, andes will launch afterwards. There are also convenience scripts in the \nandes/andes\n directory to start and stop the API:\n\n\n\n\n\n\n\n\nName\n\n\nTranslates to\n\n\nFunction\n\n\n\n\n\n\n\n\n\n\nstart_andes.sh\n\n\ndocker-compose up -d\n\n\nStarts andes as daemonized process\n\n\n\n\n\n\nstop_andes.sh\n\n\ndocker-compose down\n\n\nStops andes\n\n\n\n\n\n\nfollow_logs.sh\n\n\ndocker-compose logs -f\n\n\nStreams andes logs to STDOUT. Exit with CTRL+C\n\n\n\n\n\n\nshow_logs.sh\n\n\ndocker-compose logs\n\n\nShows andes logs\n\n\n\n\n\n\n\n\nResponse format\n\n\nResponses return, in general, a JSON object with metadata and (if applicable) the actual data or an error message in the following format:\n\n\n# Sample format\n{\n    \"status\": <status code>,\n    \"message\": <...>,\n    \"error\": <...>,\n    \"data\": <...>\n}\n\n\n\n\nFor more information on the response format, have a look at the endpoint reference.\n\n\nAuthentication\n\n\nIf you're starting from scratch you need to create a user first:\n\n\n# Endpoint\nPOST /register\n\n# Header\nContent-Type: application/json\n\n# Body\n{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}\n\n\n\n\nNow you need to authenticate: \n\n\n# Endpoint\nPOST /auth\n\n# Header\nContent-Type: application/json\n\n# Body\n{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}\n\n\n\n\nWhich will return a JWT token:\n\n\n{\n  \"access_token\": superSecretToken\n}\n\n\n\n\nThis needs to be included in following requests as a header:\n\n\n# Endpoint\nGET /stacks\n\n# Header\nAuthorization: JWT superSecretToken\n\n# Response\n{\n    \"status\": 200,\n    \"message\": \"Stacks have been retrieved.\",\n    \"error\": null,\n    \"data\": []\n}\n\n\n\n\nCreating a new blueprint\n\n\nBefore we create a service, we have to create a blueprint first. This is essentially defining a Docker image, either built locally or from a registry. Please note that at this point there is no functionality to build the image with the andes API, or define a custom registry other than docker hub. If you want to change any of that, you will have to do it manually. \n\n\nLet's create a simple Caddy blueprint:\n\n\n# Endpoint\nPOST /blueprints/create\n\n# Headers (will be omitted for brevity in future examples)\nContent-Type: application/json\nAuthorization: JWT superSecretToken\n\n# Body\n{\n    \"name\": \"foo\",\n    \"description\": \"bar\",\n    \"image\": \"abiosoft/caddy\"\n}\n\n# Response\n{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"abiosoft/caddy\",\n        \"services\": []\n    }\n}\n\n\n\n\nCreating a new service\n\n\nFrom this newly created blueprint we can start to define services and attach them to stacks. While a blueprint only defines an image, a service holds information about exposed ports, mapped volumes, environment variables, etc.\n\n\n# Endpoint\nPOST /services/create\n\n# Body\n{\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"mapped_ports\": [\"81:80\", \"2015:2015\"],\n    \"blueprint\": 1\n}\n\n# Response\n{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [],\n        \"exposed_ports\": null,\n        \"mapped_ports\": [\n            \"81:80\",\n            \"2015:2015\"\n        ],\n        \"volumes\": null,\n        \"env\": null,\n        \"restart\": null,\n        \"ip\": \"172.42.0.11\"\n    }\n}\n\n\n\n\nWe can see here that the service has been created with \nforwarded ports\n defined and an IP automatically assigned.\n\n\nCreating a new stack\n\n\nNext we use our created service and define it in a stack. You can define as many different services in a stack as you wish but for this example we will stick to just our newly created service.\n\n\n# Endpoint\nPOST /stacks/create\n\n# Body\n{\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"services\": [1],\n    \"proxy_service\": 1,\n    \"subdomain\": \"test.localhost\",\n    \"proxy_port\": 2015\n}\n\n# Response\n{\n    \"status\": 201,\n    \"message\": \"Stack foo_stack has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.localhost\",\n        \"email\": null,\n        \"proxy_service\": 1,\n        \"proxy_port\": 2015,\n        \"services\": [\n            1\n        ],\n        \"created_at\": \"2018-01-08T14:33:27.671960\",\n        \"last_changed\": \"2018-01-08T14:33:27.671960\"\n    }\n}\n\n\n\n\n\nFor the stack we have to define a service and a port to which our main Caddy will route the request to. In our case this is service 1 with port 2015. For demonstration purposes the subdomain will be test.localhost, you have to substitute this with your own domain. Also there is no email defined because in this case we're not using TLS encryption. If you want to use automatic TLS encryption, make sure to provide your email here.\n\n\nStarting our stack\n\n\nNow that we have created our stack and saved it to the database, let's create the necessary config files in order to start the stack through docker-compose:\n\n\n# Endpoint\nPOST /stacks/1/apply\n\n# Response\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been applied.\",\n    \"error\": null,\n    \"data\": null\n}\n\n\n\n\nIf you look into your folder under \nandes/andes/stacks\n you will see two files:\n\n\nstacks/conf.d/foo_stack.conf\n\n\nThis file will be imported to our main Caddy with information about how to route traffic:\n\n\ntest.localhost {\n  tls off\n  proxy / foo_service:2015 {\n    transparent\n  }\n  log stdout\n  errors stderror\n}\n\n\n\n\nstacks/foo_stack/docker-compose.yml\n\n\nThis file gets created from information in the stack with its specific services and will later be started with docker-compose:\n\n\nversion: '3'\nservices:\n  foo_service:\n    image: abiosoft/caddy\n    container_name: foo_stack_foo_service\n    ports:\n      - \"81:80\"\n      - \"2015:2015\"\n    external_links:\n      - caddy\n    networks:\n      andes_default:\n        ipv4_address: 172.42.0.11\nnetworks:\n  andes_default:\n    external: true\n\n\n\n\nWith those files created we can safely launch our stack:\n\n\n# Endpoint\nPOST /stacks/1/manage/up\n\n# Response\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been started.\",\n    \"error\": null,\n    \"data\": {\n        \"stdout\": \"Creating foo_stack_foo_service ... \\r\\nCreating foo_stack_foo_service\\n\\u001b[1A\\u001b[2K\\rCreating foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1B\"\n    }\n}\n\n\n\n\nWe can now check on our command line if our service is running:\n\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                 NAMES\n80743ddc0038        abiosoft/caddy         \"/usr/bin/caddy --...\"   49 seconds ago      Up 49 seconds       0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp, 2015/tcp    andes_web_1\n28bc4189d7f4        obitech/andes:latest   \"uwsgi uwsgi.ini\"        50 seconds ago      Up 50 seconds       5000-5001/tcp                                         andes_andes_1\nacc382a68636        abiosoft/caddy         \"/usr/bin/caddy --...\"   16 seconds ago      Up 16 seconds       443/tcp, 0.0.0.0:2015->2015/tcp, 0.0.0.0:81->80/tcp   foo_stack_foo_service\n\n\n\n\nYou can check via \ntest.localhost\n (you might have to adjust your \n/etc/hosts\n beforehand) that your new service containing Caddy is indeed running and reachable.",
            "title": "Home"
        },
        {
            "location": "/#andes-api-documentation",
            "text": "Welcome to Andes' API documentation. For information on classes and functions themselves, please refer to the source for now.   Github repo  Docker image",
            "title": "Andes API Documentation"
        },
        {
            "location": "/#general",
            "text": "Andes offers an easy-to-use way to deploy multiple different container setups (stacks) on the same host. For this there are three parts:   Caddy  acting as a reverse proxy handling requests to your different stacks.  Andes API to create and manage your stacks and build your docker-compose files.  Docker-compose bringing up your previously defined stacks as docker-compose.yml files.   Normally the workflow looks like that:   You register a blueprint, which is essentially a docker image on docker hub, or one you created locally.  From a blueprint you create a service, which is defining your container environment  You add one or more services to a stack.  You apply a stack, which will create the  docker-compose.yml  and specific  Caddyfile  for it.  You launch your stack and Caddy will serve it on your specified subdomain.   Note that Andes' stacks have nothing to do with the  docker stack  command in swarm mode.",
            "title": "General"
        },
        {
            "location": "/#installation",
            "text": "After you've cloned the github repo, the best way to setup andes is to run the bootstrap script. This installation has been tested on Debian, Ubuntu and macOS.",
            "title": "Installation"
        },
        {
            "location": "/#bootstrapsh",
            "text": "The script accepts the following arguments:     Argument  Function      -h  Displays usage information    -c  Skips Caddy installation and setup. Use this flag if you only want to install docker and docker-compose    -d  Skips docker and docker-compose installation. Use this flag if you have already docker installed and just want to setup Caddy for Andes.    -H <hostname>  Specifies the hostname Caddy to be reached under. Defaults to localhost    -e <email>  Your email address which is required to setup Let's Encrypt TLS certificates. Without this, TLS can not be used.    -V <version>  The docker-compose version to be installed. Defaults to 1.17.1",
            "title": "bootstrap.sh"
        },
        {
            "location": "/#docker-installation",
            "text": "For the docker installation, the script follows the procedure from the official docker documentation   Remove deprecated docker packages  Install additional packages, namely  apt-transport-https  ca-certificates  curl  software-properties-common  bash-completion    Add and verify docker's official GPG key  Add and install the  docker-ce  repository.  Add your user to the docker group  Enable the docker.service  Curl and install docker-compose, plus add it to  bash-completion   Between the docker and Caddy setup, the script will also create a user defined docker network with subnet  172.42.0.0./16  where Caddy and the deployed containers will run in.",
            "title": "Docker installation"
        },
        {
            "location": "/#caddy-setup",
            "text": "Create a  Caddyfile  in  andes/andes/system  according to the previously passed arguments  Pull the  Caddy container image  Pull the  Andes API container image  Bring up the  docker-compose.yml  in  andes/andes/system .   Check with  docker container ls  if you have the andes and Caddy container up and running. The API will will be reachable under your specified hostname +  /api",
            "title": "Caddy setup"
        },
        {
            "location": "/#using-the-api",
            "text": "",
            "title": "Using the API"
        },
        {
            "location": "/#start-stop",
            "text": "If you're installing andes from the bootstrap script, andes will launch afterwards. There are also convenience scripts in the  andes/andes  directory to start and stop the API:     Name  Translates to  Function      start_andes.sh  docker-compose up -d  Starts andes as daemonized process    stop_andes.sh  docker-compose down  Stops andes    follow_logs.sh  docker-compose logs -f  Streams andes logs to STDOUT. Exit with CTRL+C    show_logs.sh  docker-compose logs  Shows andes logs",
            "title": "Start &amp; Stop"
        },
        {
            "location": "/#response-format",
            "text": "Responses return, in general, a JSON object with metadata and (if applicable) the actual data or an error message in the following format:  # Sample format\n{\n    \"status\": <status code>,\n    \"message\": <...>,\n    \"error\": <...>,\n    \"data\": <...>\n}  For more information on the response format, have a look at the endpoint reference.",
            "title": "Response format"
        },
        {
            "location": "/#authentication",
            "text": "If you're starting from scratch you need to create a user first:  # Endpoint\nPOST /register\n\n# Header\nContent-Type: application/json\n\n# Body\n{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}  Now you need to authenticate:   # Endpoint\nPOST /auth\n\n# Header\nContent-Type: application/json\n\n# Body\n{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}  Which will return a JWT token:  {\n  \"access_token\": superSecretToken\n}  This needs to be included in following requests as a header:  # Endpoint\nGET /stacks\n\n# Header\nAuthorization: JWT superSecretToken\n\n# Response\n{\n    \"status\": 200,\n    \"message\": \"Stacks have been retrieved.\",\n    \"error\": null,\n    \"data\": []\n}",
            "title": "Authentication"
        },
        {
            "location": "/#creating-a-new-blueprint",
            "text": "Before we create a service, we have to create a blueprint first. This is essentially defining a Docker image, either built locally or from a registry. Please note that at this point there is no functionality to build the image with the andes API, or define a custom registry other than docker hub. If you want to change any of that, you will have to do it manually.   Let's create a simple Caddy blueprint:  # Endpoint\nPOST /blueprints/create\n\n# Headers (will be omitted for brevity in future examples)\nContent-Type: application/json\nAuthorization: JWT superSecretToken\n\n# Body\n{\n    \"name\": \"foo\",\n    \"description\": \"bar\",\n    \"image\": \"abiosoft/caddy\"\n}\n\n# Response\n{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"abiosoft/caddy\",\n        \"services\": []\n    }\n}",
            "title": "Creating a new blueprint"
        },
        {
            "location": "/#creating-a-new-service",
            "text": "From this newly created blueprint we can start to define services and attach them to stacks. While a blueprint only defines an image, a service holds information about exposed ports, mapped volumes, environment variables, etc.  # Endpoint\nPOST /services/create\n\n# Body\n{\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"mapped_ports\": [\"81:80\", \"2015:2015\"],\n    \"blueprint\": 1\n}\n\n# Response\n{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [],\n        \"exposed_ports\": null,\n        \"mapped_ports\": [\n            \"81:80\",\n            \"2015:2015\"\n        ],\n        \"volumes\": null,\n        \"env\": null,\n        \"restart\": null,\n        \"ip\": \"172.42.0.11\"\n    }\n}  We can see here that the service has been created with  forwarded ports  defined and an IP automatically assigned.",
            "title": "Creating a new service"
        },
        {
            "location": "/#creating-a-new-stack",
            "text": "Next we use our created service and define it in a stack. You can define as many different services in a stack as you wish but for this example we will stick to just our newly created service.  # Endpoint\nPOST /stacks/create\n\n# Body\n{\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"services\": [1],\n    \"proxy_service\": 1,\n    \"subdomain\": \"test.localhost\",\n    \"proxy_port\": 2015\n}\n\n# Response\n{\n    \"status\": 201,\n    \"message\": \"Stack foo_stack has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.localhost\",\n        \"email\": null,\n        \"proxy_service\": 1,\n        \"proxy_port\": 2015,\n        \"services\": [\n            1\n        ],\n        \"created_at\": \"2018-01-08T14:33:27.671960\",\n        \"last_changed\": \"2018-01-08T14:33:27.671960\"\n    }\n}  For the stack we have to define a service and a port to which our main Caddy will route the request to. In our case this is service 1 with port 2015. For demonstration purposes the subdomain will be test.localhost, you have to substitute this with your own domain. Also there is no email defined because in this case we're not using TLS encryption. If you want to use automatic TLS encryption, make sure to provide your email here.",
            "title": "Creating a new stack"
        },
        {
            "location": "/#starting-our-stack",
            "text": "Now that we have created our stack and saved it to the database, let's create the necessary config files in order to start the stack through docker-compose:  # Endpoint\nPOST /stacks/1/apply\n\n# Response\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been applied.\",\n    \"error\": null,\n    \"data\": null\n}  If you look into your folder under  andes/andes/stacks  you will see two files:",
            "title": "Starting our stack"
        },
        {
            "location": "/#stacksconfdfoo_stackconf",
            "text": "This file will be imported to our main Caddy with information about how to route traffic:  test.localhost {\n  tls off\n  proxy / foo_service:2015 {\n    transparent\n  }\n  log stdout\n  errors stderror\n}",
            "title": "stacks/conf.d/foo_stack.conf"
        },
        {
            "location": "/#stacksfoo_stackdocker-composeyml",
            "text": "This file gets created from information in the stack with its specific services and will later be started with docker-compose:  version: '3'\nservices:\n  foo_service:\n    image: abiosoft/caddy\n    container_name: foo_stack_foo_service\n    ports:\n      - \"81:80\"\n      - \"2015:2015\"\n    external_links:\n      - caddy\n    networks:\n      andes_default:\n        ipv4_address: 172.42.0.11\nnetworks:\n  andes_default:\n    external: true  With those files created we can safely launch our stack:  # Endpoint\nPOST /stacks/1/manage/up\n\n# Response\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been started.\",\n    \"error\": null,\n    \"data\": {\n        \"stdout\": \"Creating foo_stack_foo_service ... \\r\\nCreating foo_stack_foo_service\\n\\u001b[1A\\u001b[2K\\rCreating foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1B\"\n    }\n}  We can now check on our command line if our service is running:  $ docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                 NAMES\n80743ddc0038        abiosoft/caddy         \"/usr/bin/caddy --...\"   49 seconds ago      Up 49 seconds       0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp, 2015/tcp    andes_web_1\n28bc4189d7f4        obitech/andes:latest   \"uwsgi uwsgi.ini\"        50 seconds ago      Up 50 seconds       5000-5001/tcp                                         andes_andes_1\nacc382a68636        abiosoft/caddy         \"/usr/bin/caddy --...\"   16 seconds ago      Up 16 seconds       443/tcp, 0.0.0.0:2015->2015/tcp, 0.0.0.0:81->80/tcp   foo_stack_foo_service  You can check via  test.localhost  (you might have to adjust your  /etc/hosts  beforehand) that your new service containing Caddy is indeed running and reachable.",
            "title": "stacks/foo_stack/docker-compose.yml"
        },
        {
            "location": "/overview/",
            "text": "Endpoint overview\n\n\nAuthentication\n\n\n\n\n\n\n\n\nMethod\n\n\nEndpoint\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nPOST\n\n\n/register\n\n\nRegisters new user\n\n\n\n\n\n\nPOST\n\n\n/auth\n\n\nAuthenticates user\n\n\n\n\n\n\n\n\nBlueprints\n\n\n\n\n\n\n\n\nMethod\n\n\nEndpoint\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nGET\n\n\n/blueprints\n\n\nRetrieves list of blueprints\n\n\n\n\n\n\nGET\n\n\n/blueprints/<_id>\n\n\nRetrieves single blueprint\n\n\n\n\n\n\nDELETE\n\n\n/blueprints/<_id>\n\n\nDeletes a single blueprint\n\n\n\n\n\n\nPOST\n\n\n/blueprints/create\n\n\nCreates a new blueprint\n\n\n\n\n\n\nPUT\n\n\n/blueprints/create\n\n\nCreates or updates a blueprint\n\n\n\n\n\n\n\n\nServices\n\n\n\n\n\n\n\n\nMethod\n\n\nEndpoint\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nGET\n\n\n/services\n\n\nRetrieves list of services\n\n\n\n\n\n\nGET\n\n\n/services/<_id>\n\n\nRetrieves single services\n\n\n\n\n\n\nDELETE\n\n\n/services/<_id>\n\n\nDeletes a single service\n\n\n\n\n\n\nPOST\n\n\n/services/create\n\n\nCreates a new service\n\n\n\n\n\n\nPUT\n\n\n/services/create\n\n\nCreates or updates a service\n\n\n\n\n\n\n\n\nStacks\n\n\nBasic Operations\n\n\n\n\n\n\n\n\nMethod\n\n\nEndpoint\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nGET\n\n\n/stacks\n\n\nRetrieves list of stacks\n\n\n\n\n\n\nGET\n\n\n/stacks/<_id>\n\n\nRetrieves single stacks\n\n\n\n\n\n\nDELETE\n\n\n/stacks/<_id>\n\n\nDeletes single service\n\n\n\n\n\n\nPOST\n\n\n/stacks/<_id>/apply\n\n\nApplies a stack and saves config files to disk\n\n\n\n\n\n\nDELETE\n\n\n/stacks/<_id>/apply\n\n\nDeletes or purges the stack's config files\n\n\n\n\n\n\nPOST\n\n\n/stacks/create\n\n\nCreates a new stack\n\n\n\n\n\n\nPUT\n\n\n/stacks/create\n\n\nCreates or updates a stack\n\n\n\n\n\n\n\n\nContainer management\n\n\n\n\n\n\n\n\nMethod\n\n\nEndpoint\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nPOST\n\n\n/stacks/<_id>/manage/up\n\n\nStarts a specific stack\n\n\n\n\n\n\nPOST\n\n\n/stacks/<_id>/manage/down\n\n\nShuts down a specific stack if it's running\n\n\n\n\n\n\nGET\n\n\n/stacks/<_id>/manage/status\n\n\nRetrieves status information about running or exited containers of a specific stack\n\n\n\n\n\n\nGET\n\n\n/stacks/<_id>/manage/logs\n\n\nRetrieves logs for specific stack\n\n\n\n\n\n\nDELETE\n\n\n/stacks/<_id>/manage/delete\n\n\nRemoves and deletes containers for a specific stack",
            "title": "Endpoint Overview"
        },
        {
            "location": "/overview/#endpoint-overview",
            "text": "",
            "title": "Endpoint overview"
        },
        {
            "location": "/overview/#authentication",
            "text": "Method  Endpoint  Comments      POST  /register  Registers new user    POST  /auth  Authenticates user",
            "title": "Authentication"
        },
        {
            "location": "/overview/#blueprints",
            "text": "Method  Endpoint  Comments      GET  /blueprints  Retrieves list of blueprints    GET  /blueprints/<_id>  Retrieves single blueprint    DELETE  /blueprints/<_id>  Deletes a single blueprint    POST  /blueprints/create  Creates a new blueprint    PUT  /blueprints/create  Creates or updates a blueprint",
            "title": "Blueprints"
        },
        {
            "location": "/overview/#services",
            "text": "Method  Endpoint  Comments      GET  /services  Retrieves list of services    GET  /services/<_id>  Retrieves single services    DELETE  /services/<_id>  Deletes a single service    POST  /services/create  Creates a new service    PUT  /services/create  Creates or updates a service",
            "title": "Services"
        },
        {
            "location": "/overview/#stacks",
            "text": "",
            "title": "Stacks"
        },
        {
            "location": "/overview/#basic-operations",
            "text": "Method  Endpoint  Comments      GET  /stacks  Retrieves list of stacks    GET  /stacks/<_id>  Retrieves single stacks    DELETE  /stacks/<_id>  Deletes single service    POST  /stacks/<_id>/apply  Applies a stack and saves config files to disk    DELETE  /stacks/<_id>/apply  Deletes or purges the stack's config files    POST  /stacks/create  Creates a new stack    PUT  /stacks/create  Creates or updates a stack",
            "title": "Basic Operations"
        },
        {
            "location": "/overview/#container-management",
            "text": "Method  Endpoint  Comments      POST  /stacks/<_id>/manage/up  Starts a specific stack    POST  /stacks/<_id>/manage/down  Shuts down a specific stack if it's running    GET  /stacks/<_id>/manage/status  Retrieves status information about running or exited containers of a specific stack    GET  /stacks/<_id>/manage/logs  Retrieves logs for specific stack    DELETE  /stacks/<_id>/manage/delete  Removes and deletes containers for a specific stack",
            "title": "Container management"
        },
        {
            "location": "/endpoints/user/register/post/",
            "text": "POST /register\n\n\nRegister and saves the user to the database.\n\n\nFull path\n\n\n/register\n\n\nHeaders\n\n\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\nKey | JSON Value type | Comment | Required\n---|---|---\nusername|String|The username to be registered|Yes\npassword|String|The password of the user|Yes\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nnull\n\n\nUser created successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nUsername already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /register\n\n\nRequest body\n\n\n{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}\n\n\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"User foo has been created.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "POST"
        },
        {
            "location": "/endpoints/user/register/post/#post-register",
            "text": "Register and saves the user to the database.",
            "title": "POST /register"
        },
        {
            "location": "/endpoints/user/register/post/#full-path",
            "text": "/register",
            "title": "Full path"
        },
        {
            "location": "/endpoints/user/register/post/#headers",
            "text": "Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/user/register/post/#body",
            "text": "Key | JSON Value type | Comment | Required\n---|---|---\nusername|String|The username to be registered|Yes\npassword|String|The password of the user|Yes",
            "title": "Body"
        },
        {
            "location": "/endpoints/user/register/post/#returns",
            "text": "Status code  Data  Comments      200  null  User created successfully.    400  null  Username already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/user/register/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/user/register/post/#request",
            "text": "POST /register",
            "title": "Request"
        },
        {
            "location": "/endpoints/user/register/post/#request-body",
            "text": "{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/user/register/post/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"User foo has been created.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/user/auth/post/",
            "text": "POST /auth\n\n\nAuthenticates a user and returns a JWT token.\n\n\nHeaders\n\n\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nComment\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nString\n\n\nThe username to be authenticated\n\n\nYes\n\n\n\n\n\n\npassword\n\n\nString\n\n\nThe password of the user\n\n\nYes\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nnull\n\n\nUser created successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nUsername already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /auth\n\n\nRequest body\n\n\n{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}\n\n\n\n\nResponse body\n\n\n{\n    \"access_token\": \"...\"\n}",
            "title": "POST"
        },
        {
            "location": "/endpoints/user/auth/post/#post-auth",
            "text": "Authenticates a user and returns a JWT token.",
            "title": "POST /auth"
        },
        {
            "location": "/endpoints/user/auth/post/#headers",
            "text": "Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/user/auth/post/#body",
            "text": "Key  JSON Value type  Comment  Required      username  String  The username to be authenticated  Yes    password  String  The password of the user  Yes",
            "title": "Body"
        },
        {
            "location": "/endpoints/user/auth/post/#returns",
            "text": "Status code  Data  Comments      200  null  User created successfully.    400  null  Username already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/user/auth/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/user/auth/post/#request",
            "text": "POST /auth",
            "title": "Request"
        },
        {
            "location": "/endpoints/user/auth/post/#request-body",
            "text": "{\n    \"username\": \"foo\",\n    \"password\": \"bar\"\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/user/auth/post/#response-body",
            "text": "{\n    \"access_token\": \"...\"\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/blueprints/get/",
            "text": "GET /blueprints\n\n\nRetrieves a list of blueprints.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nList of Blueprints\n\n\nRetrieval of Blueprints successful.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /blueprints\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Blueprints have been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/blueprints/get/#get-blueprints",
            "text": "Retrieves a list of blueprints.",
            "title": "GET /blueprints"
        },
        {
            "location": "/endpoints/blueprints/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/blueprints/get/#returns",
            "text": "Status code  Data  Comments      200  List of Blueprints  Retrieval of Blueprints successful.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/blueprints/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/blueprints/get/#request",
            "text": "GET /blueprints",
            "title": "Request"
        },
        {
            "location": "/endpoints/blueprints/get/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Blueprints have been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/blueprints/id/get/",
            "text": "GET /blueprints/<_id>\n\n\nRetrieves a specific blueprint according to passed ID.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nBlueprint\n\n\nRetrieval of Blueprint successful.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nBlueprint with passed name has not been found.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /blueprints/1\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/blueprints/id/get/#get-blueprints_id",
            "text": "Retrieves a specific blueprint according to passed ID.",
            "title": "GET /blueprints/&lt;_id&gt;"
        },
        {
            "location": "/endpoints/blueprints/id/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/blueprints/id/get/#returns",
            "text": "Status code  Data  Comments      200  Blueprint  Retrieval of Blueprint successful.    400  null  Blueprint with passed name has not been found.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/blueprints/id/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/blueprints/id/get/#request",
            "text": "GET /blueprints/1",
            "title": "Request"
        },
        {
            "location": "/endpoints/blueprints/id/get/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/blueprints/id/delete/",
            "text": "DELETE /blueprints/<_id>\n\n\nDeletes a specific blueprint according to passed ID.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nnull\n\n\nDeletion of Blueprint successful.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nBlueprint not found.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nDELETE /blueprints/1\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Blueprint foo has been deleted.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "DELETE"
        },
        {
            "location": "/endpoints/blueprints/id/delete/#delete-blueprints_id",
            "text": "Deletes a specific blueprint according to passed ID.",
            "title": "DELETE /blueprints/&lt;_id&gt;"
        },
        {
            "location": "/endpoints/blueprints/id/delete/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/blueprints/id/delete/#returns",
            "text": "Status code  Data  Comments      200  null  Deletion of Blueprint successful.    400  null  Blueprint not found.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/blueprints/id/delete/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/blueprints/id/delete/#request",
            "text": "DELETE /blueprints/1",
            "title": "Request"
        },
        {
            "location": "/endpoints/blueprints/id/delete/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Blueprint foo has been deleted.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/blueprints/create/post/",
            "text": "POST /blueprints/create\n\n\nCreates a new blueprint.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n\n\n\n\nimage\n\n\nString\n\n\nYes\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nNo\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nBlueprint\n\n\nBlueprint has been created successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nBlueprint with passed image already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /blueprints/create\n\n\nRequest body\n\n\n{\n    \"name\": \"foo\",\n    \"description\": \"bar\",\n    \"image\": \"hello-world\"\n}\n\n\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "POST"
        },
        {
            "location": "/endpoints/blueprints/create/post/#post-blueprintscreate",
            "text": "Creates a new blueprint.",
            "title": "POST /blueprints/create"
        },
        {
            "location": "/endpoints/blueprints/create/post/#headers",
            "text": "Authorization: JWT <JWT Token>  Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/blueprints/create/post/#body",
            "text": "Key  JSON Value type  Required      name  String  Yes    image  String  Yes    description  String  No",
            "title": "Body"
        },
        {
            "location": "/endpoints/blueprints/create/post/#returns",
            "text": "Status code  Data  Comments      201  Blueprint  Blueprint has been created successfully.    400  null  Blueprint with passed image already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/blueprints/create/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/blueprints/create/post/#request",
            "text": "POST /blueprints/create",
            "title": "Request"
        },
        {
            "location": "/endpoints/blueprints/create/post/#request-body",
            "text": "{\n    \"name\": \"foo\",\n    \"description\": \"bar\",\n    \"image\": \"hello-world\"\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/blueprints/create/post/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/blueprints/create/put/",
            "text": "PUT /blueprints/create\n\n\nCreates or updates a blueprint.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n\n\n\n\nimage\n\n\nString\n\n\nYes\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nNo\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nBlueprint\n\n\nBlueprint has been created or updated successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nBlueprint with passed image already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPUT /blueprints/create\n\n\nRequest body\n\n\n{\n    \"name\": \"foo\",\n    \"description\": \"bar\",\n    \"image\": \"hello-world\"\n}\n\n\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "PUT"
        },
        {
            "location": "/endpoints/blueprints/create/put/#put-blueprintscreate",
            "text": "Creates or updates a blueprint.",
            "title": "PUT /blueprints/create"
        },
        {
            "location": "/endpoints/blueprints/create/put/#headers",
            "text": "Authorization: JWT <JWT Token>  Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/blueprints/create/put/#body",
            "text": "Key  JSON Value type  Required      name  String  Yes    image  String  Yes    description  String  No",
            "title": "Body"
        },
        {
            "location": "/endpoints/blueprints/create/put/#returns",
            "text": "Status code  Data  Comments      201  Blueprint  Blueprint has been created or updated successfully.    400  null  Blueprint with passed image already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/blueprints/create/put/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/blueprints/create/put/#request",
            "text": "PUT /blueprints/create",
            "title": "Request"
        },
        {
            "location": "/endpoints/blueprints/create/put/#request-body",
            "text": "{\n    \"name\": \"foo\",\n    \"description\": \"bar\",\n    \"image\": \"hello-world\"\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/blueprints/create/put/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Blueprint foo has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo\",\n        \"description\": \"bar\",\n        \"image\": \"hello-world\",\n        \"services: [1,2]\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/services/get/",
            "text": "GET /services\n\n\nRetrieves a list of services.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nList of Services\n\n\nRetrieval of Services has been successful.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /services\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Services have been retrieved.\",\n    \"error\": null,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"blueprint\": 1,\n            \"name\": \"foo_service\",\n            \"description\": \"A test service\",\n            \"stacks\": [],\n            \"exposed_ports\": [\n                80,\n                8080\n            ],\n            \"mapped_ports\": [\n                \"80:80\"\n            ],\n            \"volumes\": [\n                \"/srv/www:/\"\n            ],\n            \"env\": [\n                \"FOO=BAR\",\n                \"DEBUG=1\"\n            ],\n            \"restart\": \"always\",\n            \"ip\": \"172.42.0.11\"\n        }\n    ]\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/services/get/#get-services",
            "text": "Retrieves a list of services.",
            "title": "GET /services"
        },
        {
            "location": "/endpoints/services/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/services/get/#returns",
            "text": "Status code  Data  Comments      200  List of Services  Retrieval of Services has been successful.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/services/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/services/get/#request",
            "text": "GET /services",
            "title": "Request"
        },
        {
            "location": "/endpoints/services/get/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Services have been retrieved.\",\n    \"error\": null,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"blueprint\": 1,\n            \"name\": \"foo_service\",\n            \"description\": \"A test service\",\n            \"stacks\": [],\n            \"exposed_ports\": [\n                80,\n                8080\n            ],\n            \"mapped_ports\": [\n                \"80:80\"\n            ],\n            \"volumes\": [\n                \"/srv/www:/\"\n            ],\n            \"env\": [\n                \"FOO=BAR\",\n                \"DEBUG=1\"\n            ],\n            \"restart\": \"always\",\n            \"ip\": \"172.42.0.11\"\n        }\n    ]\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/services/id/get/",
            "text": "GET /services/<_id>\n\n\nRetrieves a specific service according to passed ID.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nService\n\n\nRetrieval of Service successful.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nService with passed name has not been found.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /services/1\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [1],\n        \"exposed_ports\": [80,8080],\n        \"mapped_ports\": [\"80:80\"],\n        \"volumes\": [\"/srv/www:/\"],\n        \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n        \"restart\": \"always\",\n        \"ip\": \"172.42.0.11\"\n    }\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/services/id/get/#get-services_id",
            "text": "Retrieves a specific service according to passed ID.",
            "title": "GET /services/&lt;_id&gt;"
        },
        {
            "location": "/endpoints/services/id/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/services/id/get/#returns",
            "text": "Status code  Data  Comments      200  Service  Retrieval of Service successful.    400  null  Service with passed name has not been found.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/services/id/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/services/id/get/#request",
            "text": "GET /services/1",
            "title": "Request"
        },
        {
            "location": "/endpoints/services/id/get/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [1],\n        \"exposed_ports\": [80,8080],\n        \"mapped_ports\": [\"80:80\"],\n        \"volumes\": [\"/srv/www:/\"],\n        \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n        \"restart\": \"always\",\n        \"ip\": \"172.42.0.11\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/services/id/delete/",
            "text": "DELETE /services/<_id>\n\n\nDeletes a specific service according to passed ID.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nnull\n\n\nDeletion of Service successful.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nService with passed name has not been found.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nDELETE /services/1\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Service foo has been deleted.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "DELETE"
        },
        {
            "location": "/endpoints/services/id/delete/#delete-services_id",
            "text": "Deletes a specific service according to passed ID.",
            "title": "DELETE /services/&lt;_id&gt;"
        },
        {
            "location": "/endpoints/services/id/delete/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/services/id/delete/#returns",
            "text": "Status code  Data  Comments      200  null  Deletion of Service successful.    400  null  Service with passed name has not been found.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/services/id/delete/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/services/id/delete/#request",
            "text": "DELETE /services/1",
            "title": "Request"
        },
        {
            "location": "/endpoints/services/id/delete/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Service foo has been deleted.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/services/create/post/",
            "text": "POST /services/create\n\n\nCreates a new service.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nComment\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe service name\n\n\nYes\n\n\n\n\n\n\nblueprint\n\n\nInteger\n\n\nThe Blueprint ID this service implements\n\n\nYes\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nThe service description\n\n\nNo\n\n\n\n\n\n\nexposed_ports\n\n\nArray of integers\n\n\nPorts to be \nexposed\n to other services in stack.\n\n\nNo\n\n\n\n\n\n\nmapped_ports\n\n\nArray of strings\n\n\nPorts to be \nmapped\n between host and service\n\n\nNo\n\n\n\n\n\n\nvolumes\n\n\nArray of strings\n\n\nVolumes to be \nmapped\n between host and service. Only supports file system mapping.\n\n\nNo\n\n\n\n\n\n\nenv\n\n\nArray of strings\n\n\nEnvironment variables to be passed to service\n\n\nNo\n\n\n\n\n\n\nrestart\n\n\nString\n\n\nThe restart flag for this service\n\n\nNo\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nService\n\n\nService has been created successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nService with passed name already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /services/create\n\n\nRequest body\n\n\n{\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"exposed_ports\": [80,8080],\n    \"mapped_ports\": [\"80:80\"],\n    \"blueprint\": 1,\n    \"volumes\": [\"/srv/www:/\"],\n    \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n    \"restart\": \"always\",\n    \"stacks\": 1\n}\n\n\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [1],\n        \"exposed_ports\": [80,8080],\n        \"mapped_ports\": [\"80:80\"],\n        \"volumes\": [\"/srv/www:/\"],\n        \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n        \"restart\": \"always\",\n        \"ip\": \"172.42.0.11\"\n    }\n}",
            "title": "POST"
        },
        {
            "location": "/endpoints/services/create/post/#post-servicescreate",
            "text": "Creates a new service.",
            "title": "POST /services/create"
        },
        {
            "location": "/endpoints/services/create/post/#headers",
            "text": "Authorization: JWT <JWT Token>  Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/services/create/post/#body",
            "text": "Key  JSON Value type  Comment  Required      name  String  The service name  Yes    blueprint  Integer  The Blueprint ID this service implements  Yes    description  String  The service description  No    exposed_ports  Array of integers  Ports to be  exposed  to other services in stack.  No    mapped_ports  Array of strings  Ports to be  mapped  between host and service  No    volumes  Array of strings  Volumes to be  mapped  between host and service. Only supports file system mapping.  No    env  Array of strings  Environment variables to be passed to service  No    restart  String  The restart flag for this service  No",
            "title": "Body"
        },
        {
            "location": "/endpoints/services/create/post/#returns",
            "text": "Status code  Data  Comments      201  Service  Service has been created successfully.    400  null  Service with passed name already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/services/create/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/services/create/post/#request",
            "text": "POST /services/create",
            "title": "Request"
        },
        {
            "location": "/endpoints/services/create/post/#request-body",
            "text": "{\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"exposed_ports\": [80,8080],\n    \"mapped_ports\": [\"80:80\"],\n    \"blueprint\": 1,\n    \"volumes\": [\"/srv/www:/\"],\n    \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n    \"restart\": \"always\",\n    \"stacks\": 1\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/services/create/post/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [1],\n        \"exposed_ports\": [80,8080],\n        \"mapped_ports\": [\"80:80\"],\n        \"volumes\": [\"/srv/www:/\"],\n        \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n        \"restart\": \"always\",\n        \"ip\": \"172.42.0.11\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/services/create/put/",
            "text": "PUT /services/create\n\n\nCreates or updates a service.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nComment\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe service name\n\n\nYes\n\n\n\n\n\n\nblueprint\n\n\nInteger\n\n\nThe Blueprint ID this service implements\n\n\nYes\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nThe service description\n\n\nNo\n\n\n\n\n\n\nexposed_ports\n\n\nArray of integers\n\n\nPorts to be \nexposed\n to other services in stack.\n\n\nNo\n\n\n\n\n\n\nmapped_ports\n\n\nArray of strings\n\n\nPorts to be \nmapped\n between host and service\n\n\nNo\n\n\n\n\n\n\nvolumes\n\n\nArray of strings\n\n\nVolumes to be \nmapped\n between host and service. Only supports file system mapping.\n\n\nNo\n\n\n\n\n\n\nenv\n\n\nArray of strings\n\n\nEnvironment variables to be passed to service\n\n\nNo\n\n\n\n\n\n\nrestart\n\n\nString\n\n\nThe restart flag for this service\n\n\nNo\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nService\n\n\nService has been created or updated successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nService with passed name already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPUT /services/create\n\n\nRequest body\n\n\n{\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"exposed_ports\": [80,8080],\n    \"mapped_ports\": [\"80:80\"],\n    \"blueprint\": 1,\n    \"volumes\": [\"/srv/www:/\"],\n    \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n    \"restart\": \"always\",\n    \"stacks\": 1\n}\n\n\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [1],\n        \"exposed_ports\": [80,8080],\n        \"mapped_ports\": [\"80:80\"],\n        \"volumes\": [\"/srv/www:/\"],\n        \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n        \"restart\": \"always\",\n        \"ip\": \"172.42.0.11\"\n    }\n}",
            "title": "PUT"
        },
        {
            "location": "/endpoints/services/create/put/#put-servicescreate",
            "text": "Creates or updates a service.",
            "title": "PUT /services/create"
        },
        {
            "location": "/endpoints/services/create/put/#headers",
            "text": "Authorization: JWT <JWT Token>  Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/services/create/put/#body",
            "text": "Key  JSON Value type  Comment  Required      name  String  The service name  Yes    blueprint  Integer  The Blueprint ID this service implements  Yes    description  String  The service description  No    exposed_ports  Array of integers  Ports to be  exposed  to other services in stack.  No    mapped_ports  Array of strings  Ports to be  mapped  between host and service  No    volumes  Array of strings  Volumes to be  mapped  between host and service. Only supports file system mapping.  No    env  Array of strings  Environment variables to be passed to service  No    restart  String  The restart flag for this service  No",
            "title": "Body"
        },
        {
            "location": "/endpoints/services/create/put/#returns",
            "text": "Status code  Data  Comments      201  Service  Service has been created or updated successfully.    400  null  Service with passed name already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/services/create/put/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/services/create/put/#request",
            "text": "PUT /services/create",
            "title": "Request"
        },
        {
            "location": "/endpoints/services/create/put/#request-body",
            "text": "{\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"exposed_ports\": [80,8080],\n    \"mapped_ports\": [\"80:80\"],\n    \"blueprint\": 1,\n    \"volumes\": [\"/srv/www:/\"],\n    \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n    \"restart\": \"always\",\n    \"stacks\": 1\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/services/create/put/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Service foo_service has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"blueprint\": 1,\n        \"name\": \"foo_service\",\n        \"description\": \"A test service\",\n        \"stacks\": [1],\n        \"exposed_ports\": [80,8080],\n        \"mapped_ports\": [\"80:80\"],\n        \"volumes\": [\"/srv/www:/\"],\n        \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n        \"restart\": \"always\",\n        \"ip\": \"172.42.0.11\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/get/",
            "text": "GET /stacks\n\n\nRetrieves a list of stacks.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nList of stacks\n\n\nRetrieval of stacks has been successful.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /stacks\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Stacks have been retrieved.\",\n    \"error\": null,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"foo_stack\",\n            \"description\": \"test stack\",\n            \"subdomain\": \"test.example.com\",\n            \"services\": [\n                1\n            ],\n            \"created_at\": \"2017-12-16T18:15:12.179471\",\n            \"last_changed\": \"2017-12-16T18:15:12.179471\"\n        }\n    ]\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/stacks/get/#get-stacks",
            "text": "Retrieves a list of stacks.",
            "title": "GET /stacks"
        },
        {
            "location": "/endpoints/stacks/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/get/#returns",
            "text": "Status code  Data  Comments      200  List of stacks  Retrieval of stacks has been successful.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/get/#request",
            "text": "GET /stacks",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/get/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Stacks have been retrieved.\",\n    \"error\": null,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"foo_stack\",\n            \"description\": \"test stack\",\n            \"subdomain\": \"test.example.com\",\n            \"services\": [\n                1\n            ],\n            \"created_at\": \"2017-12-16T18:15:12.179471\",\n            \"last_changed\": \"2017-12-16T18:15:12.179471\"\n        }\n    ]\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/get/",
            "text": "GET /stacks/<_id>\n\n\nRetrieves a specific stack according to passed ID.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nStack\n\n\nRetrieval of stack successful.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nStack with passed name has not been found.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /stacks/1\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.example.com\",\n        \"services\": [1],\n        \"created_at\": \"2017-12-14T09:21:50.503274\",\n        \"last_changed\": \"2017-12-14T09:21:50.503274\"\n    }\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/stacks/id/get/#get-stacks_id",
            "text": "Retrieves a specific stack according to passed ID.",
            "title": "GET /stacks/&lt;_id&gt;"
        },
        {
            "location": "/endpoints/stacks/id/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/get/#returns",
            "text": "Status code  Data  Comments      200  Stack  Retrieval of stack successful.    400  null  Stack with passed name has not been found.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/get/#request",
            "text": "GET /stacks/1",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/get/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.example.com\",\n        \"services\": [1],\n        \"created_at\": \"2017-12-14T09:21:50.503274\",\n        \"last_changed\": \"2017-12-14T09:21:50.503274\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/delete/",
            "text": "DELETE /stacks/<_id>\n\n\nDeletes a specific stack according to passed ID. This will fail, if any containers are still in running or exited status.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nnull\n\n\nDeletion of stack has been successful.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nStack with passed name has not been found.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nDELETE /stacks/1\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been deleted.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "DELETE"
        },
        {
            "location": "/endpoints/stacks/id/delete/#delete-stacks_id",
            "text": "Deletes a specific stack according to passed ID. This will fail, if any containers are still in running or exited status.",
            "title": "DELETE /stacks/&lt;_id&gt;"
        },
        {
            "location": "/endpoints/stacks/id/delete/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/delete/#returns",
            "text": "Status code  Data  Comments      200  null  Deletion of stack has been successful.    400  null  Stack with passed name has not been found.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/delete/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/delete/#request",
            "text": "DELETE /stacks/1",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/delete/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been deleted.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/create/post/",
            "text": "POST /stacks/create\n\n\nCreates a new stack.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nComment\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe stack name\n\n\nYes\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nThe stack description\n\n\nNo\n\n\n\n\n\n\nsubdomain\n\n\nString\n\n\nThe subdomain this stack will be reachable under.\n\n\nNo\n\n\n\n\n\n\nemail\n\n\nString\n\n\nThe email to be put in the stack-specific Caddyfile. This is needed for automatic TLS encryption.\n\n\nNo\n\n\n\n\n\n\nproxy_service\n\n\nInteger\n\n\nThe service ID to which Caddy should forward requests to. Needs to be part of the stack\n\n\nNo\n\n\n\n\n\n\nproxy_port\n\n\nInteger\n\n\nThe port added to the service ID for Caddy to forward requests to. \nThis does not check if the service actually publishes the port.\n\n\nNo\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nStack\n\n\nStack has been created successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nStack with passed name already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /stacks/create\n\n\nRequest body\n\n\n{\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"subdomain\": \"test.example.com\",\n    \"email\": \"test@example.com\",\n    \"proxy_service\": 1,\n    \"proxy_port\": 80,    \n    \"services\": [1]\n}\n\n\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Stack foo_stack has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.example.com\",\n        \"email\": \"test@example.com\",\n        \"proxy_service\": 1,\n        \"proxy_port\": 80,\n        \"services\": [1],\n        \"created_at\": \"2017-12-14T09:21:50.503274\",\n        \"last_changed\": \"2017-12-14T09:21:50.503274\"\n    }\n}",
            "title": "POST"
        },
        {
            "location": "/endpoints/stacks/create/post/#post-stackscreate",
            "text": "Creates a new stack.",
            "title": "POST /stacks/create"
        },
        {
            "location": "/endpoints/stacks/create/post/#headers",
            "text": "Authorization: JWT <JWT Token>  Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/create/post/#body",
            "text": "Key  JSON Value type  Comment  Required      name  String  The stack name  Yes    description  String  The stack description  No    subdomain  String  The subdomain this stack will be reachable under.  No    email  String  The email to be put in the stack-specific Caddyfile. This is needed for automatic TLS encryption.  No    proxy_service  Integer  The service ID to which Caddy should forward requests to. Needs to be part of the stack  No    proxy_port  Integer  The port added to the service ID for Caddy to forward requests to.  This does not check if the service actually publishes the port.  No",
            "title": "Body"
        },
        {
            "location": "/endpoints/stacks/create/post/#returns",
            "text": "Status code  Data  Comments      201  Stack  Stack has been created successfully.    400  null  Stack with passed name already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/create/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/create/post/#request",
            "text": "POST /stacks/create",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/create/post/#request-body",
            "text": "{\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"subdomain\": \"test.example.com\",\n    \"email\": \"test@example.com\",\n    \"proxy_service\": 1,\n    \"proxy_port\": 80,    \n    \"services\": [1]\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/stacks/create/post/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Stack foo_stack has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.example.com\",\n        \"email\": \"test@example.com\",\n        \"proxy_service\": 1,\n        \"proxy_port\": 80,\n        \"services\": [1],\n        \"created_at\": \"2017-12-14T09:21:50.503274\",\n        \"last_changed\": \"2017-12-14T09:21:50.503274\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/create/put/",
            "text": "PUT /stacks/create\n\n\nCreates or updates a stack. Please be aware that if a stack is already \napplied\n, those changes will not be propagated downstream, so you will have to apply the stack again to create its project files. It is also advised to shutdown and and remove a stack first.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\nContent-Type: application/json\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nComment\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe stack name\n\n\nYes\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nThe stack description\n\n\nNo\n\n\n\n\n\n\nsubdomain\n\n\nString\n\n\nThe subdomain this stack will be reachable under. Defaults to localhost\n\n\nNo\n\n\n\n\n\n\nemail\n\n\nString\n\n\nThe email to be put in the stack-specific Caddyfile. This is needed for automatic TLS encryption.\n\n\nNo\n\n\n\n\n\n\nproxy_service\n\n\nInteger\n\n\nThe service ID to which Caddy should forward requests to. Needs to be part of the stack\n\n\nNo\n\n\n\n\n\n\nproxy_port\n\n\nInteger\n\n\nThe port added to the service ID for Caddy to forward requests to. \nThis does not check if the service actually publishes the port.\n\n\nNo\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nStack\n\n\nStack has been created or updated successfully.\n\n\n\n\n\n\n400\n\n\nnull\n\n\nStack with passed name already exists.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPUT /stacks/create\n\n\nRequest body\n\n\n{\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"subdomain\": \"test.example.com\",\n    \"email\": \"test@example.com\",\n    \"proxy_service\": 1,\n    \"proxy_port\": 80,    \n    \"services\": [1]\n}\n\n\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Stack foo_stack has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.example.com\",\n        \"email\": \"test@example.com\",\n        \"proxy_service\": 1,\n        \"proxy_port\": 80,\n        \"services\": [1],\n        \"created_at\": \"2017-12-14T09:21:50.503274\",\n        \"last_changed\": \"2017-12-14T09:21:50.503274\"\n    }\n}",
            "title": "PUT"
        },
        {
            "location": "/endpoints/stacks/create/put/#put-stackscreate",
            "text": "Creates or updates a stack. Please be aware that if a stack is already  applied , those changes will not be propagated downstream, so you will have to apply the stack again to create its project files. It is also advised to shutdown and and remove a stack first.",
            "title": "PUT /stacks/create"
        },
        {
            "location": "/endpoints/stacks/create/put/#headers",
            "text": "Authorization: JWT <JWT Token>  Content-Type: application/json",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/create/put/#body",
            "text": "Key  JSON Value type  Comment  Required      name  String  The stack name  Yes    description  String  The stack description  No    subdomain  String  The subdomain this stack will be reachable under. Defaults to localhost  No    email  String  The email to be put in the stack-specific Caddyfile. This is needed for automatic TLS encryption.  No    proxy_service  Integer  The service ID to which Caddy should forward requests to. Needs to be part of the stack  No    proxy_port  Integer  The port added to the service ID for Caddy to forward requests to.  This does not check if the service actually publishes the port.  No",
            "title": "Body"
        },
        {
            "location": "/endpoints/stacks/create/put/#returns",
            "text": "Status code  Data  Comments      201  Stack  Stack has been created or updated successfully.    400  null  Stack with passed name already exists.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/create/put/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/create/put/#request",
            "text": "PUT /stacks/create",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/create/put/#request-body",
            "text": "{\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"subdomain\": \"test.example.com\",\n    \"email\": \"test@example.com\",\n    \"proxy_service\": 1,\n    \"proxy_port\": 80,    \n    \"services\": [1]\n}",
            "title": "Request body"
        },
        {
            "location": "/endpoints/stacks/create/put/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Stack foo_stack has been updated.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"description\": \"test stack\",\n        \"subdomain\": \"test.example.com\",\n        \"email\": \"test@example.com\",\n        \"proxy_service\": 1,\n        \"proxy_port\": 80,\n        \"services\": [1],\n        \"created_at\": \"2017-12-14T09:21:50.503274\",\n        \"last_changed\": \"2017-12-14T09:21:50.503274\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/",
            "text": "POST /stacks/<_id>/apply\n\n\nApplies a stack: \n\n\n\n\ngenerates a \ndocker-compose.yml\n and saves it to disc in \nandes/andes/stacks/<stack_name>/docker-compose.yml\n\n\ngenerates a \n<stack_name>.conf\n and saves it to dics in \nandes/andes/stacks/conf.d/<stack_name>.conf\n\n\n\n\nThe main Caddyfile will then import all \n.conf\n files in the \nconf.d/\n folder.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nStack\n\n\nStack has been applied successfully.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /stacks/1/apply\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been applied.\",\n    \"error\": null,\n    \"data\": null\n}\n\n\n\n\nExample stack used\n\n\n\"data\": {\n    \"id\": 1,\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"subdomain\": \"test.example.com\",\n    \"email\": \"test@example.com\",\n    \"proxy_service\": 1,\n    \"proxy_port\": 80,\n    \"services\": [1],\n    \"created_at\": \"2017-12-14T09:21:50.503274\",\n    \"last_changed\": \"2017-12-14T09:21:50.503274\"\n}\n\n\n\n\nExample proxy_service used\n\n\n\"data\": {\n    \"id\": 1,\n    \"blueprint\": 1,\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"stacks\": [1],\n    \"exposed_ports\": [80,8080],\n    \"mapped_ports\": [\"80:80\"],\n    \"volumes\": [\"/srv/www:/\"],\n    \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n    \"restart\": \"always\",\n    \"ip\": \"172.42.0.11\"\n}\n\n\n\n\nCreated .conf file\n\n\n# Location: andes/stacks/conf.d/<foo_stack class=\"conf\"></foo_stack>\n\ntest.example.com {\n  test@example.com\n  proxy / foo_service:80 {\n    transparent\n  }\n  logs stdout\n  errors stderror\n}\n\n\n\n\nCreate docker-compose.yml\n\n\n# Location: andes/stacks/foo_stack/docker-compose.yml\n\nversion: '3'\nservices:\n  foo_service:\n    image: abiosoft/caddy\n    container_name: foo_stack_foo_service\n    expose:\n      - \"80\"\n      - \"8080\"\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/srv/www:/\"\n    environment:\n      - \"FOO=BAR\"\n      - \"DEBUG=1\"\n    external_links:\n      - caddy\n    networks:\n      andes_default:\n        ipv4_address: 172.42.0.11\n    restart: always\nnetworks:\n  andes_default:\n    external: true",
            "title": "POST"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#post-stacks_idapply",
            "text": "Applies a stack:    generates a  docker-compose.yml  and saves it to disc in  andes/andes/stacks/<stack_name>/docker-compose.yml  generates a  <stack_name>.conf  and saves it to dics in  andes/andes/stacks/conf.d/<stack_name>.conf   The main Caddyfile will then import all  .conf  files in the  conf.d/  folder.",
            "title": "POST /stacks/&lt;_id&gt;/apply"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#returns",
            "text": "Status code  Data  Comments      201  Stack  Stack has been applied successfully.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#request",
            "text": "POST /stacks/1/apply",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been applied.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#example-stack-used",
            "text": "\"data\": {\n    \"id\": 1,\n    \"name\": \"foo_stack\",\n    \"description\": \"test stack\",\n    \"subdomain\": \"test.example.com\",\n    \"email\": \"test@example.com\",\n    \"proxy_service\": 1,\n    \"proxy_port\": 80,\n    \"services\": [1],\n    \"created_at\": \"2017-12-14T09:21:50.503274\",\n    \"last_changed\": \"2017-12-14T09:21:50.503274\"\n}",
            "title": "Example stack used"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#example-proxy_service-used",
            "text": "\"data\": {\n    \"id\": 1,\n    \"blueprint\": 1,\n    \"name\": \"foo_service\",\n    \"description\": \"A test service\",\n    \"stacks\": [1],\n    \"exposed_ports\": [80,8080],\n    \"mapped_ports\": [\"80:80\"],\n    \"volumes\": [\"/srv/www:/\"],\n    \"env\": [\"FOO=BAR\",\"DEBUG=1\"],\n    \"restart\": \"always\",\n    \"ip\": \"172.42.0.11\"\n}",
            "title": "Example proxy_service used"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#created-conf-file",
            "text": "# Location: andes/stacks/conf.d/<foo_stack class=\"conf\"></foo_stack>\n\ntest.example.com {\n  test@example.com\n  proxy / foo_service:80 {\n    transparent\n  }\n  logs stdout\n  errors stderror\n}",
            "title": "Created .conf file"
        },
        {
            "location": "/endpoints/stacks/id/apply/post/#create-docker-composeyml",
            "text": "# Location: andes/stacks/foo_stack/docker-compose.yml\n\nversion: '3'\nservices:\n  foo_service:\n    image: abiosoft/caddy\n    container_name: foo_stack_foo_service\n    expose:\n      - \"80\"\n      - \"8080\"\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/srv/www:/\"\n    environment:\n      - \"FOO=BAR\"\n      - \"DEBUG=1\"\n    external_links:\n      - caddy\n    networks:\n      andes_default:\n        ipv4_address: 172.42.0.11\n    restart: always\nnetworks:\n  andes_default:\n    external: true",
            "title": "Create docker-compose.yml"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/",
            "text": "DELETE /stacks/<_id>/apply\n\n\nDeletes or purges a stack's project files. This will check if any service containers are running first and won't proceed if they are.\n\n\n\n\nDelete will remove the \ndocker-compose.yml\n and \n.conf\n file\n\n\nPurge will also delete the project folder under \nandes/stacks/<stack_name>\n\n\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\nContent-Type: application/json\n (optional)\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nKey\n\n\nJSON Value type\n\n\nComment\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npurge\n\n\nString\n\n\nCan be true or false. If set to true, The project folder \nandes/stacks/<stack_name>\n will also be removed\n\n\nNo\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n201\n\n\nNull\n\n\nProject files have been deleted.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nDELETE /stacks/1/apply?purge=true\n\n\nResponse body\n\n\n{\n    \"status\": 201,\n    \"message\": \"Project files for stack foo_stack have been successfully removed.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "DELETE"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/#delete-stacks_idapply",
            "text": "Deletes or purges a stack's project files. This will check if any service containers are running first and won't proceed if they are.   Delete will remove the  docker-compose.yml  and  .conf  file  Purge will also delete the project folder under  andes/stacks/<stack_name>",
            "title": "DELETE /stacks/&lt;_id&gt;/apply"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/#headers",
            "text": "Authorization: JWT <JWT Token>  Content-Type: application/json  (optional)",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/#body",
            "text": "Key  JSON Value type  Comment  Required      purge  String  Can be true or false. If set to true, The project folder  andes/stacks/<stack_name>  will also be removed  No",
            "title": "Body"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/#returns",
            "text": "Status code  Data  Comments      201  Null  Project files have been deleted.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/#request",
            "text": "DELETE /stacks/1/apply?purge=true",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/apply/delete/#response-body",
            "text": "{\n    \"status\": 201,\n    \"message\": \"Project files for stack foo_stack have been successfully removed.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/manage/up/post/",
            "text": "POST /stacks/<_id>/manage/up\n\n\nLaunches a stack. This basically applies a \ndocker-compose up -d\n in the specific project folder \nandes/stacks/<stack_name>\n. Will fail if containers are already running. The STDOUT for the command will be passed to the data field.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nString of STDOUT\n\n\nStack has been started successfully.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /stacks/1/manage/up\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been started.\",\n    \"error\": null,\n    \"data\": {\n        \"stdout\": \"Creating foo_stack_foo_service ... \\r\\nCreating foo_stack_foo_service\\n\\u001b[1A\\u001b[2K\\rCreating foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1B\"\n    }\n}",
            "title": "POST"
        },
        {
            "location": "/endpoints/stacks/id/manage/up/post/#post-stacks_idmanageup",
            "text": "Launches a stack. This basically applies a  docker-compose up -d  in the specific project folder  andes/stacks/<stack_name> . Will fail if containers are already running. The STDOUT for the command will be passed to the data field.",
            "title": "POST /stacks/&lt;_id&gt;/manage/up"
        },
        {
            "location": "/endpoints/stacks/id/manage/up/post/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/manage/up/post/#returns",
            "text": "Status code  Data  Comments      200  String of STDOUT  Stack has been started successfully.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/manage/up/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/manage/up/post/#request",
            "text": "POST /stacks/1/manage/up",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/manage/up/post/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been started.\",\n    \"error\": null,\n    \"data\": {\n        \"stdout\": \"Creating foo_stack_foo_service ... \\r\\nCreating foo_stack_foo_service\\n\\u001b[1A\\u001b[2K\\rCreating foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1B\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/manage/down/post/",
            "text": "POST /stacks/<_id>/manage/down\n\n\nShuts down a running stack. This basically applies a \ndocker-compose down\n in the specific project folder \nandes/stacks/<stack_name>\n. The STDOUT for the command will be passed to the data field.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nString of STDOUT\n\n\nStack has been stopped successfully.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nPOST /stacks/1/manage/down\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been shut down.\",\n    \"error\": null,\n    \"data\": {\n        \"stdout\": \"Stopping foo_stack_foo_service ... \\r\\n\\u001b[1A\\u001b[2K\\rStopping foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1BRemoving foo_stack_foo_service ... \\r\\n\\u001b[1A\\u001b[2K\\rRemoving foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1BNetwork andes_default is external, skipping\\n\"\n    }\n}",
            "title": "POST"
        },
        {
            "location": "/endpoints/stacks/id/manage/down/post/#post-stacks_idmanagedown",
            "text": "Shuts down a running stack. This basically applies a  docker-compose down  in the specific project folder  andes/stacks/<stack_name> . The STDOUT for the command will be passed to the data field.",
            "title": "POST /stacks/&lt;_id&gt;/manage/down"
        },
        {
            "location": "/endpoints/stacks/id/manage/down/post/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/manage/down/post/#returns",
            "text": "Status code  Data  Comments      200  String of STDOUT  Stack has been stopped successfully.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/manage/down/post/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/manage/down/post/#request",
            "text": "POST /stacks/1/manage/down",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/manage/down/post/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Stack foo_stack has been shut down.\",\n    \"error\": null,\n    \"data\": {\n        \"stdout\": \"Stopping foo_stack_foo_service ... \\r\\n\\u001b[1A\\u001b[2K\\rStopping foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1BRemoving foo_stack_foo_service ... \\r\\n\\u001b[1A\\u001b[2K\\rRemoving foo_stack_foo_service ... \\u001b[32mdone\\u001b[0m\\r\\u001b[1BNetwork andes_default is external, skipping\\n\"\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/manage/status/get/",
            "text": "GET /stacks/<_id>/manage/status\n\n\nRetrieves status information about running or exited containers of the specific stack. Will fail if no containers are running or exited.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nStatus information of stack and running services\n\n\nInfo has been retrieved successfully.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /stacks/1/manage/status\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Data for services in stack foo_stack has been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"subdomain\": \"localhost\",\n        \"port\": 2015,\n        \"services\": [\n            {\n                \"id\": \"1847b5a7f5\",\n                \"name\": \"foo_stack_foo_service\",\n                \"status\": \"running\",\n                \"labels\": {\n                    \"caddy_version\": \"0.10.10\",\n                    \"com.docker.compose.config-hash\": \"9b9eaac0e5419599dd382a6bab29a71ab4371bbdaa251d53de3de26543d93e12\",\n                    \"com.docker.compose.container-number\": \"1\",\n                    \"com.docker.compose.oneoff\": \"False\",\n                    \"com.docker.compose.project\": \"foostack\",\n                    \"com.docker.compose.service\": \"foo_service\",\n                    \"com.docker.compose.version\": \"1.17.1\",\n                    \"maintainer\": \"Abiola Ibrahim <abiola89@gmail.com>\"\n                }\n            }\n        ]\n    }\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/stacks/id/manage/status/get/#get-stacks_idmanagestatus",
            "text": "Retrieves status information about running or exited containers of the specific stack. Will fail if no containers are running or exited.",
            "title": "GET /stacks/&lt;_id&gt;/manage/status"
        },
        {
            "location": "/endpoints/stacks/id/manage/status/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/manage/status/get/#returns",
            "text": "Status code  Data  Comments      200  Status information of stack and running services  Info has been retrieved successfully.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/manage/status/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/manage/status/get/#request",
            "text": "GET /stacks/1/manage/status",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/manage/status/get/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Data for services in stack foo_stack has been retrieved.\",\n    \"error\": null,\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"foo_stack\",\n        \"subdomain\": \"localhost\",\n        \"port\": 2015,\n        \"services\": [\n            {\n                \"id\": \"1847b5a7f5\",\n                \"name\": \"foo_stack_foo_service\",\n                \"status\": \"running\",\n                \"labels\": {\n                    \"caddy_version\": \"0.10.10\",\n                    \"com.docker.compose.config-hash\": \"9b9eaac0e5419599dd382a6bab29a71ab4371bbdaa251d53de3de26543d93e12\",\n                    \"com.docker.compose.container-number\": \"1\",\n                    \"com.docker.compose.oneoff\": \"False\",\n                    \"com.docker.compose.project\": \"foostack\",\n                    \"com.docker.compose.service\": \"foo_service\",\n                    \"com.docker.compose.version\": \"1.17.1\",\n                    \"maintainer\": \"Abiola Ibrahim <abiola89@gmail.com>\"\n                }\n            }\n        ]\n    }\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/manage/logs/get/",
            "text": "GET /stacks/<_id>/manage/logs\n\n\nRetrieves the logs of a specific stack. Will be posted in the data field of the response.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nLogs of stack as list of strings\n\n\nLogs have been retrieved successfully.\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nGET /stacks/1/manage/logs\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Data for services in stack foo_stack has been retrieved.\",\n    \"error\": null,\n    \"data\": [\n        {\n            \"id\": \"1847b5a7f5\",\n            \"name\": \"foo_stack_foo_service\",\n            \"logs\": [\n                \"Activating privacy features... done.\",\n                \"http://0.0.0.0:2015\",\n                \"2017/12/28 14:59:07 http://0.0.0.0:2015\"\n            ]\n        }\n    ]\n}",
            "title": "GET"
        },
        {
            "location": "/endpoints/stacks/id/manage/logs/get/#get-stacks_idmanagelogs",
            "text": "Retrieves the logs of a specific stack. Will be posted in the data field of the response.",
            "title": "GET /stacks/&lt;_id&gt;/manage/logs"
        },
        {
            "location": "/endpoints/stacks/id/manage/logs/get/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/manage/logs/get/#returns",
            "text": "Status code  Data  Comments      200  Logs of stack as list of strings  Logs have been retrieved successfully.",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/manage/logs/get/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/manage/logs/get/#request",
            "text": "GET /stacks/1/manage/logs",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/manage/logs/get/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Data for services in stack foo_stack has been retrieved.\",\n    \"error\": null,\n    \"data\": [\n        {\n            \"id\": \"1847b5a7f5\",\n            \"name\": \"foo_stack_foo_service\",\n            \"logs\": [\n                \"Activating privacy features... done.\",\n                \"http://0.0.0.0:2015\",\n                \"2017/12/28 14:59:07 http://0.0.0.0:2015\"\n            ]\n        }\n    ]\n}",
            "title": "Response body"
        },
        {
            "location": "/endpoints/stacks/id/manage/remove/delete/",
            "text": "DELETE /stacks/<_id>/manage/remove\n\n\nRemoves the containers for a specific stack. Will force remove if containers are still running.\n\n\nHeaders\n\n\n\n\nAuthorization: JWT <JWT Token>\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nStatus code\n\n\nData\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n200\n\n\nNull\n\n\nContainers have been succsessfully removed\n\n\n\n\n\n\n\n\nExample\n\n\nRequest\n\n\nDELETE /stacks/1/manage/down\n\n\nResponse body\n\n\n{\n    \"status\": 200,\n    \"message\": \"Container for stack foo_stack have been removed successfully.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "DELETE"
        },
        {
            "location": "/endpoints/stacks/id/manage/remove/delete/#delete-stacks_idmanageremove",
            "text": "Removes the containers for a specific stack. Will force remove if containers are still running.",
            "title": "DELETE /stacks/&lt;_id&gt;/manage/remove"
        },
        {
            "location": "/endpoints/stacks/id/manage/remove/delete/#headers",
            "text": "Authorization: JWT <JWT Token>",
            "title": "Headers"
        },
        {
            "location": "/endpoints/stacks/id/manage/remove/delete/#returns",
            "text": "Status code  Data  Comments      200  Null  Containers have been succsessfully removed",
            "title": "Returns"
        },
        {
            "location": "/endpoints/stacks/id/manage/remove/delete/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/endpoints/stacks/id/manage/remove/delete/#request",
            "text": "DELETE /stacks/1/manage/down",
            "title": "Request"
        },
        {
            "location": "/endpoints/stacks/id/manage/remove/delete/#response-body",
            "text": "{\n    \"status\": 200,\n    \"message\": \"Container for stack foo_stack have been removed successfully.\",\n    \"error\": null,\n    \"data\": null\n}",
            "title": "Response body"
        }
    ]
}